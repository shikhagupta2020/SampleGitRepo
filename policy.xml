<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<choose>
			<when condition="@((context.Request.Body) != null)">
				<set-variable name="body" value="@(context.Request.Body.As<string>(preserveContent: true))" />
				<set-variable name="requestDataCheck" value="@{
                    XDocument xDoc = context.Request.Body.As<XDocument>(preserveContent: true);                  
                    String usernameVal = "";
                    String passwordVal = "";
                    String reqNo = "";
                    String appNo = "";                 
                    try {
                        usernameVal = xDoc.Root.Element("{http://schemas.xmlsoap.org/soap/envelope/}Header").Element("{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Security").Element("{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}UsernameToken").Element("{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Username").Value.ToString();
                        passwordVal = xDoc.Root.Element("{http://schemas.xmlsoap.org/soap/envelope/}Header").Element("{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Security").Element("{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}UsernameToken").Element("{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Password").Value.ToString();                       
                        if ( !(usernameVal.Equals("{{InWSSecUser}}")) || !(passwordVal.Equals("{{InWSSecPass}}")) ) {
                            throw new Exception ("ws-security invalid username token");
                        }
                    } catch (Exception e) {
                        throw new Exception("AUTHENTICATION-FAILURE: An error occurred in ws-security username token verification", e);
                    }
                    try {
                        reqNo  = xDoc.Root.Element("{http://schemas.xmlsoap.org/soap/envelope/}Body").Element("{http://jp.co.manulife.scv.alphasearch}alphaSearchRequest").Element("{http://jp.co.manulife.scv.alphasearch}basicInfo").Element("{http://jp.co.manulife.scv.alphasearch}requestNo").Value.ToString();
                        appNo =  xDoc.Root.Element("{http://schemas.xmlsoap.org/soap/envelope/}Body").Element("{http://jp.co.manulife.scv.alphasearch}alphaSearchRequest").Element("{http://jp.co.manulife.scv.alphasearch}largeProductInfo").Element("{http://jp.co.manulife.scv.alphasearch}largeProductDetails").Element("{http://jp.co.manulife.scv.alphasearch}applicationNo").Value.ToString();
                    }
                    catch (Exception e){
                        throw new Exception("REQUEST-LOGGING-FAILURE: An error occurred while logging request key information", e);
                    }
                    return "SCV_AlphaSearch, INBOUND, SUCCESS, RequestGUID["+context.RequestId.ToString()+"], RequestNo["+reqNo+"], ApplicationNo["+appNo+"]";               
                }" />
			</when>
			<otherwise>
				<return-response>
					<set-status code="500" reason="REQUEST-VALIDATION-FAILED" />
					<set-header name="Content-Type" exists-action="override">
						<value>text/xml</value>
					</set-header>
					<set-body template="none">@("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" + 
				        "   <soapenv:Body>\n" + 
				        "      <soapenv:Fault>\n" + 
				        "         <faultcode>REQUEST-VALIDATION-FAILED</faultcode>\n" + 
				        "         <faultstring>INVALID-BODY</faultstring>\n" + 
				        "      </soapenv:Fault>\n" + 
				        "   </soapenv:Body>\n" + 
				        "</soapenv:Envelope>")</set-body>
				</return-response>
			</otherwise>
		</choose>
		<find-and-replace from="{{InWSSecUser}}" to="{{SCVUsername}}" />
		<find-and-replace from="{{InWSSecPass}}" to="{{SCVPassword}}" />
		<set-backend-service base-url="{{SCVAlphaSearchURL}}" />
	</inbound>
	<backend>
		<forward-request timeout="120" fail-on-error-status-code="true" />
	</backend>
	<outbound>
		<choose>
			<when condition="@((context.Response.Body) != null)">
				<set-variable name="responseBody" value="@(context.Response.Body.As<string>(preserveContent: true))" />
				<set-variable name="responseDataCheck" value="@{
                    String respBodyStr      = "";
                    String respPart      = "";
                    respBodyStr = (String)context.Variables["responseBody"]; 
                    respPart = respBodyStr.Substring(100,200);
                    return "SCV_AlphaSearch, OUTBOUND, SUCCESS, RequestGUID["+context.RequestId.ToString()+"], ResponsePart["+respPart+"]";
                }" />
			</when>
			<otherwise>
				<set-variable name="responseNullCheck" value="@{  
                    return "SCV_AlphaSearch, OUTBOUND, FAILURE, RequestGUID["+context.RequestId.ToString()+"], Error[Backend Response Is NULL]";
                }" />
				<return-response>
					<set-status code="500" reason="BACKEND-RESPONSE-NULL" />
					<set-header name="Content-Type" exists-action="override">
						<value>text/xml</value>
					</set-header>
					<set-body template="none">@("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" + 
				        "   <soapenv:Body>\n" + 
				        "      <soapenv:Fault>\n" + 
				        "         <faultcode>RESPONSE-VALIDATION-FAILED</faultcode>\n" + 
				        "         <faultstring>BACKEND-RESPONSE-NULL</faultstring>\n" + 
				        "      </soapenv:Fault>\n" + 
				        "   </soapenv:Body>\n" + 
				        "</soapenv:Envelope>")</set-body>
				</return-response>
			</otherwise>
		</choose>
	</outbound>
	<on-error>
		<choose>
			<when condition="@((context.Response.Body) != null)">
				<set-variable name="errorResponseBody" value="@(context.Response.Body.As<string>(preserveContent: true))" />
				<choose>
					<when condition="@(((""+context.Variables["errorResponseBody"]).Contains("faultcode")))">
						<set-variable name="soapFaultCheck" value="@{
                            String SoapFaultInfo = ""+context.Variables["errorResponseBody"];
                            return "SCV_AlphaSearch, ONERROR, FAILURE, RequestGUID["+context.RequestId.ToString()+"], SoapFault["+SoapFaultInfo+"]";
                        }" />
					</when>
					<otherwise>
						<set-variable name="errorCheck" value="@{
                            String ErrorInfo = ""+context.LastError.Source+","+context.LastError.Reason+","+context.LastError.Message+","+context.LastError.Section+","+context.LastError.Path;
                            return "SCV_AlphaSearch, ONERROR, FAILURE, RequestGUID["+context.RequestId.ToString()+"], ErrorMessage["+ErrorInfo+"]";
                        }" />
						<return-response>
							<set-status code="@(context.Response.StatusCode)" reason="@(context.LastError.Reason)" />
							<set-header name="Content-Type" exists-action="override">
								<value>text/xml</value>
							</set-header>
							<set-header name="RequestGUID" exists-action="override">
								<value>@(context.RequestId.ToString())</value>
							</set-header>
							<set-header name="ErrorSource" exists-action="override">
								<value>@(context.LastError.Source)</value>
							</set-header>
							<set-header name="ErrorReason" exists-action="override">
								<value>@(context.LastError.Reason)</value>
							</set-header>
							<set-header name="ErrorMessage" exists-action="override">
								<value>@(context.LastError.Message)</value>
							</set-header>
							<set-header name="ErrorScope" exists-action="override">
								<value>@(context.LastError.Scope)</value>
							</set-header>
							<set-header name="ErrorSection" exists-action="override">
								<value>@(context.LastError.Section)</value>
							</set-header>
							<set-header name="ErrorPath" exists-action="override">
								<value>@(context.LastError.Path)</value>
							</set-header>
							<set-header name="ErrorStatusCode" exists-action="override">
								<value>@(context.Response.StatusCode.ToString())</value>
							</set-header>
							<set-body template="none">@("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n" + 
				                "   <soapenv:Body>\n" + 
				                "      <soapenv:Fault>\n" + 
				                "         <faultcode>"+context.LastError.Reason+"</faultcode>\n" + 
				                "         <faultstring>"+context.LastError.Message+"</faultstring>\n" + 
                                "           <detail>"+"StatusCode:"+context.Response.StatusCode+", ErrorSource:"+context.LastError.Source +
                                                ", ErrorScope:"+context.LastError.Scope+", ErrorSection:"+context.LastError.Section +
                                                ", ErrorPath:"+context.LastError.Path +
                                                ", RequestGUID:"+context.RequestId.ToString() +
                                            "</detail>\n" + 
				                "      </soapenv:Fault>\n" + 
				                "   </soapenv:Body>\n" + 
				                "</soapenv:Envelope>")</set-body>
						</return-response>
					</otherwise>
				</choose>
			</when>
			<otherwise />
		</choose>
	</on-error>
</policies>
