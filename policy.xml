<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <choose>\r\n      <when condition=\"@((context.Request.Body) != null)\">\r\n        <set-variable name=\"body\" value=\"@(context.Request.Body.As&lt;string&gt;(preserveContent: true))\" />\r\n        <set-variable name=\"requestDataCheck\" value=\"@{&#xA;                    XDocument xDoc = context.Request.Body.As&lt;XDocument&gt;(preserveContent: true);&#xA;                    String usernameVal = &quot;&quot;;&#xA;                    String passwordVal = &quot;&quot;;&#xA;                    String transactionCd = &quot;&quot;;&#xA;                    String sProdCd = &quot;&quot;;&#xA;                    String policyNo    = &quot;&quot;;&#xA;                    String effectiveDate = &quot;&quot;;&#xA;                    String requestId    = &quot;&quot;;&#xA;                    String requestorType = &quot;&quot;;&#xA;                    try {&#xA;                        usernameVal = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Header&quot;).Element(&quot;{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Security&quot;).Element(&quot;{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}UsernameToken&quot;).Element(&quot;{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Username&quot;).Value.ToString();&#xA;                        passwordVal = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Header&quot;).Element(&quot;{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Security&quot;).Element(&quot;{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}UsernameToken&quot;).Element(&quot;{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Password&quot;).Value.ToString();         &#xA;                        if ( !(usernameVal.Equals(&quot;{{InWSSecUser}}&quot;)) || !(passwordVal.Equals(&quot;{{InWSSecPass}}&quot;)) ) {&#xA;                            throw new Exception (&quot;ws-security invalid username token&quot;);&#xA;                        }&#xA;                    } catch (Exception e) {&#xA;                        throw new Exception(&quot;AUTHENTICATION-FAILURE: An error occurred in ws-security username token verification&quot;, e);&#xA;                    }&#xA;                    try {&#xA;                        transactionCd = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://UnisysMediation/AGWCSVService}getCSVData&quot;).Element(&quot;request&quot;).Element(&quot;RequestParameters&quot;).Element(&quot;TransactionCd&quot;).Value.ToString();&#xA;                        sProdCd       = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://UnisysMediation/AGWCSVService}getCSVData&quot;).Element(&quot;request&quot;).Element(&quot;RequestParameters&quot;).Element(&quot;SProdCd&quot;).Value.ToString();&#xA;                        policyNo      = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://UnisysMediation/AGWCSVService}getCSVData&quot;).Element(&quot;request&quot;).Element(&quot;RequestParameters&quot;).Element(&quot;PolicyNumber&quot;).Value.ToString();&#xA;                        effectiveDate = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://UnisysMediation/AGWCSVService}getCSVData&quot;).Element(&quot;request&quot;).Element(&quot;RequestParameters&quot;).Element(&quot;EffectiveDate&quot;).Value.ToString();&#xA;                        requestId     = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://UnisysMediation/AGWCSVService}getCSVData&quot;).Element(&quot;request&quot;).Element(&quot;RequestParameters&quot;).Element(&quot;RequestID&quot;).Value.ToString();&#xA;                        requestorType = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://UnisysMediation/AGWCSVService}getCSVData&quot;).Element(&quot;request&quot;).Element(&quot;RequestParameters&quot;).Element(&quot;RequestorType&quot;).Value.ToString();&#xA;                    }&#xA;                    catch (Exception e){&#xA;                        throw new Exception(&quot;REQUEST-LOGGING-FAILURE: An error occurred while logging request key information&quot;, e);&#xA;                    }&#xA;                    return transactionCd+sProdCd+policyNo+effectiveDate+requestId+requestorType;&#xA;                }\" />\r\n        <set-variable name=\"inputLog\" value=\"@{ &#xA;                  return &quot;UNI_CashSurrdrValue, INBOUND, SUCCESS, RequestGUID[&quot;+context.RequestId.ToString()+&quot;], InputString[&quot;+context.Variables[&quot;requestDataCheck&quot;]+&quot;]&quot;; &#xA;                }\" />\r\n       <set-body template=\"none\">@(\r\n\t\t\t\t\t\"&lt;soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:agw=\\\"http://webservices.elink.solcorp.com\\\"&gt;\\n\" + \r\n\t\t\t//  \"  &lt;soapenv:Header xmlns:wsa=\\\"http://www.w3.org/2005/08/addressing\\\"&gt;\\n\" + \r\n\t\t\t//\t\"      &lt;wsse:Security soapenv:mustUnderstand=\\\"1\\\" xmlns:wsse=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\\\"&gt;\\n\" + \r\n\t\t\t//\t\"         &lt;wsse:UsernameToken wsu:Id=\\\"unt_20\\\" xmlns:wsu=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\\\"&gt;\\n\" + \r\n\t\t\t//\t\"            &lt;wsse:Username&gt;wesbusertest01&lt;/wsse:Username&gt;\\n\" + \r\n\t\t\t//\t\"            &lt;wsse:Password Type=\\\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\\\"&gt;esbTestP@ssW0rd#01&lt;/wsse:Password&gt;\\n\" + \r\n\t\t\t//\t\"         &lt;/wsse:UsernameToken&gt;\\n\" + \r\n\t\t\t//\t\"      &lt;/wsse:Security&gt;\\n\" + \r\n\t\t\t//\t\"   &lt;/soapenv:Header&gt; \\n\" +                 \r\n                    \"  &lt;soapenv:Body&gt;\\n\" + \r\n\t\t\t\t    \"      &lt;agw:getCsvData&gt;\\n\" + \r\n\t\t\t\t    \"         &lt;arg0&gt;\"+context.Variables[\"requestDataCheck\"]+\"&lt;/arg0&gt;\\n\" + \r\n\t\t\t\t    \"      &lt;/agw:getCsvData&gt;\\n\" + \r\n\t\t\t\t    \"   &lt;/soapenv:Body&gt;\\n\" + \r\n\t\t\t\t    \"&lt;/soapenv:Envelope&gt;\")</set-body>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"500\" reason=\"REQUEST-VALIDATION-FAILED\" />\r\n          <set-header name=\"RequestValidation\" exists-action=\"override\">\r\n            <value>RequestValidation=\"invalid_body\"</value>\r\n          </set-header>\r\n          <set-header name=\"Content-Type\" exists-action=\"override\">\r\n            <value>text/xml</value>\r\n          </set-header>\r\n          <set-body template=\"none\">@(\"&lt;soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;\\n\" + \r\n\t\t\t\t        \"   &lt;soapenv:Body&gt;\\n\" + \r\n\t\t\t\t        \"      &lt;soapenv:Fault&gt;\\n\" + \r\n\t\t\t\t        \"         &lt;faultcode&gt;REQUEST-VALIDATION-FAILED&lt;/faultcode&gt;\\n\" + \r\n\t\t\t\t        \"         &lt;faultstring&gt;INVALID-BODY&lt;/faultstring&gt;\\n\" + \r\n\t\t\t\t        \"      &lt;/soapenv:Fault&gt;\\n\" + \r\n\t\t\t\t        \"   &lt;/soapenv:Body&gt;\\n\" + \r\n\t\t\t\t        \"&lt;/soapenv:Envelope&gt;\")</set-body>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n    <find-and-replace from=\"{{InWSSecUser}}\" to=\"{{UNIUsername}}\" />\r\n    <find-and-replace from=\"{{InWSSecPass}}\" to=\"{{UNIPassword}}\" />\r\n    <set-backend-service base-url=\"{{UNICashSurrdrValueURL}}\" />\r\n  </inbound>\r\n  <backend>\r\n    <forward-request timeout=\"120\" fail-on-error-status-code=\"true\" />\r\n  </backend>\r\n  <outbound>\r\n    <choose>\r\n      <when condition=\"@((context.Response.Body) != null)\">\r\n        <set-variable name=\"responseBody\" value=\"@(context.Response.Body.As&lt;string&gt;(preserveContent: true))\" />\r\n        <set-variable name=\"responseDataCheck\" value=\"@{&#xA;                    XDocument xDoc = context.Response.Body.As&lt;XDocument&gt;(preserveContent: true);&#xA;                    String unisysReturnValue = xDoc.Root.Element(&quot;{http://schemas.xmlsoap.org/soap/envelope/}Body&quot;).Element(&quot;{http://webservices.elink.solcorp.com}getCsvDataResponse&quot;).Element(&quot;return&quot;).Value.ToString();&#xA;                    return unisysReturnValue;&#xA;                }\" />\r\n        <set-variable name=\"outputLog\" value=\"@{ &#xA;                  return &quot;UNI_CashSurrdrValue, OUTBOUND, SUCCESS, RequestGUID[&quot;+context.RequestId.ToString()+&quot;], OutputString[&quot;+context.Variables[&quot;responseDataCheck&quot;]+&quot;]&quot;; &#xA;                }\" />\r\n       <set-variable name=\"responseXML\" value=\"@{&#xA;                    String outputString = &quot;&quot;+context.Variables[&quot;responseDataCheck&quot;];                    &#xA;                    String returnCode = &quot;&quot;;&#xA;                    String errorCd = &quot;&quot;;&#xA;                    String transactionCd = &quot;&quot;; &#xA;                    String apStatus = &quot;&quot;;&#xA;                    String policyCSVAmount = &quot;&quot;;&#xA;                    returnCode = outputString.Substring(0,2);&#xA;                    errorCd = outputString.Substring(2,5);&#xA;                    transactionCd = outputString.Substring(7,6);&#xA;                    if (outputString.Length &gt; 13) {&#xA;                        apStatus = outputString.Substring(13,2);&#xA;                        policyCSVAmount = outputString.Substring(15,10);&#xA;                    }                   &#xA;                    return &quot;&lt;soapenv:Envelope xmlns:soapenv=\\&quot;http://schemas.xmlsoap.org/soap/envelope/\\&quot;&gt;&lt;soapenv:Body&gt;&lt;se:getCSVDataResponse xmlns:se=\\&quot;http://UnisysMediation/AGWCSVService\\&quot;&gt;&lt;response&gt;&lt;ResponseDetails&gt;&quot;+&#xA;                    &quot;&lt;ReturnCode&gt;&quot;+returnCode+&quot;&lt;/ReturnCode&gt;&lt;PolicyCSVAmount&gt;&quot;+policyCSVAmount+&quot;&lt;/PolicyCSVAmount&gt;&lt;ErrorCd&gt;&quot;+errorCd+&quot;&lt;/ErrorCd&gt;&lt;TransactionCd&gt;&quot;+transactionCd+&quot;&lt;/TransactionCd&gt;&lt;APStatus&gt;&quot;+apStatus+&quot;&lt;/APStatus&gt;&quot;+&#xA;                    &quot;&lt;/ResponseDetails&gt;&lt;/response&gt;&lt;/se:getCSVDataResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&quot;;&#xA;                }\" />\r\n        <return-response>\r\n          <set-status code=\"200\" reason=\"OK\" />\r\n          <set-header name=\"getCSVDataResponse\" exists-action=\"override\">\r\n            <value>getCSVDataResponse</value>\r\n          </set-header>\r\n          <set-header name=\"Content-Type\" exists-action=\"override\">\r\n            <value>text/xml</value>\r\n          </set-header>\r\n          <set-body template=\"none\">@(\"\"+context.Variables[\"responseXML\"])</set-body>\r\n        </return-response>\r\n      </when>\r\n      <otherwise>\r\n        <set-variable name=\"responseNullCheck\" value=\"@{  &#xA;                    return &quot;UNI_CashSurrdrValue, OUTBOUND, FAILURE, RequestGUID[&quot;+context.RequestId.ToString()+&quot;], Error[Backend Response Is NULL]&quot;;&#xA;                }\" />\r\n         <return-response>\r\n          <set-status code=\"500\" reason=\"BackendResponseIsNull\" />\r\n          <set-header name=\"BackendError\" exists-action=\"override\">\r\n            <value>BackendError=\"backend_response_is_null\"</value>\r\n          </set-header>\r\n          <set-header name=\"Content-Type\" exists-action=\"override\">\r\n            <value>text/xml</value>\r\n          </set-header>\r\n          <set-body template=\"none\">@(\"&lt;soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;\\n\" + \r\n\t\t\t\t        \"   &lt;soapenv:Body&gt;\\n\" + \r\n\t\t\t\t        \"      &lt;soapenv:Fault&gt;\\n\" + \r\n\t\t\t\t        \"         &lt;faultcode&gt;RESPONSE-VALIDATION-FAILED&lt;/faultcode&gt;\\n\" + \r\n\t\t\t\t        \"         &lt;faultstring&gt;BACKEND-RESPONSE-NULL&lt;/faultstring&gt;\\n\" + \r\n\t\t\t\t        \"      &lt;/soapenv:Fault&gt;\\n\" + \r\n\t\t\t\t        \"   &lt;/soapenv:Body&gt;\\n\" + \r\n\t\t\t\t        \"&lt;/soapenv:Envelope&gt;\")</set-body>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </outbound>\r\n  <on-error>\r\n    <choose>\r\n      <when condition=\"@((context.Response.Body) != null)\">\r\n        <set-variable name=\"errorResponseBody\" value=\"@(context.Response.Body.As&lt;string&gt;(preserveContent: true))\" />\r\n        <choose>\r\n          <when condition=\"@(((&quot;&quot;+context.Variables[&quot;errorResponseBody&quot;]).Contains(&quot;faultcode&quot;)))\">\r\n            <set-variable name=\"responseCheck\" value=\"Backend soap fault received\" />\r\n            <set-variable name=\"soapFaultCheck\" value=\"@{&#xA;                            String SoapFaultInfo = &quot;&quot;+context.Variables[&quot;errorResponseBody&quot;];&#xA;                            return &quot;UNI_CashSurrdrValue, ONERROR, FAILURE, RequestGUID[&quot;+context.RequestId.ToString()+&quot;], SoapFault[&quot;+SoapFaultInfo+&quot;]&quot;;&#xA;                        }\" />\r\n            </when>\r\n          <otherwise>\r\n            <set-variable name=\"responseCheck\" value=\"APIM internal error occurred\" />\r\n            <set-variable name=\"errorCheck\" value=\"@{&#xA;                            String ErrorInfo = &quot;&quot;+context.LastError.Source+&quot;,&quot;+context.LastError.Reason+&quot;,&quot;+context.LastError.Message+&quot;,&quot;+context.LastError.Section+&quot;,&quot;+context.LastError.Path;&#xA;                            return &quot;UNI_CashSurrdrValue, ONERROR, FAILURE, RequestGUID[&quot;+context.RequestId.ToString()+&quot;], ErrorMessage[&quot;+ErrorInfo+&quot;]&quot;;&#xA;                        }\" />\r\n           <return-response>\r\n              <set-status code=\"@(context.Response.StatusCode)\" reason=\"@(context.LastError.Reason)\" />\r\n              <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                <value>text/xml</value>\r\n              </set-header>\r\n              <set-header name=\"RequestGUID\" exists-action=\"override\">\r\n                <value>@(context.RequestId.ToString())</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorSource\" exists-action=\"override\">\r\n                <value>@(context.LastError.Source)</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorReason\" exists-action=\"override\">\r\n                <value>@(context.LastError.Reason)</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorMessage\" exists-action=\"override\">\r\n                <value>@(context.LastError.Message)</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorScope\" exists-action=\"override\">\r\n                <value>@(context.LastError.Scope)</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorSection\" exists-action=\"override\">\r\n                <value>@(context.LastError.Section)</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorPath\" exists-action=\"override\">\r\n                <value>@(context.LastError.Path)</value>\r\n              </set-header>\r\n              <set-header name=\"ErrorStatusCode\" exists-action=\"override\">\r\n                <value>@(context.Response.StatusCode.ToString())</value>\r\n              </set-header>\r\n              <set-body template=\"none\">@(\"&lt;soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;\\n\" + \r\n\t\t\t\t                \"   &lt;soapenv:Body&gt;\\n\" + \r\n\t\t\t\t                \"      &lt;soapenv:Fault&gt;\\n\" + \r\n\t\t\t\t                \"         &lt;faultcode&gt;\"+context.LastError.Reason+\"&lt;/faultcode&gt;\\n\" + \r\n\t\t\t\t                \"         &lt;faultstring&gt;\"+context.LastError.Message+\"&lt;/faultstring&gt;\\n\" + \r\n                                \"           &lt;detail&gt;\"+\"StatusCode:\"+context.Response.StatusCode+\", ErrorSource:\"+context.LastError.Source +\r\n                                                \", ErrorScope:\"+context.LastError.Scope+\", ErrorSection:\"+context.LastError.Section +\r\n                                                \", ErrorPath:\"+context.LastError.Path +\r\n                                                \", RequestGUID:\"+context.RequestId.ToString() +\r\n                                            \"&lt;/detail&gt;\\n\" + \r\n\t\t\t\t                \"      &lt;/soapenv:Fault&gt;\\n\" + \r\n\t\t\t\t                \"   &lt;/soapenv:Body&gt;\\n\" + \r\n\t\t\t\t                \"&lt;/soapenv:Envelope&gt;\")</set-body>\r\n            </return-response>\r\n          </otherwise>\r\n        </choose>\r\n      </when>\r\n      <otherwise />\r\n    </choose>\r\n  </on-error>\r\n</policies>